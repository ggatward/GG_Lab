---
- name: Prepare oVirt Engine
  remote_user: svc-ansible
  become: true
  hosts: ovirt_engine
  tasks:
  - name: Configure oVirt repos
    tags:
    - ovirt
    - ovirt_engine
    yum:
      name: https://resources.ovirt.org/pub/yum-repo/ovirt-release44.rpm
      state: present
      disable_gpg_check: true

  # DNF module doesn't seem to fully work with modules yet
  - name: Enable prerequisite DNF modules
    tags:
    - ovirt
    - ovirt_engine
    command: "dnf module -y enable {{ item }}"
    loop:
    - 'javapackages-tools'
    - 'pki-deps'
    - 'postgresql:12'
    changed_when: false
    args:
      warn: false

  - name: Install engine packages
    tags:
    - ovirt
    - ovirt_engine
    dnf:
      name: ovirt-engine
      state: present
    register: packages


- name: Install oVirt Engine
  remote_user: svc-ansible
  become: true
  hosts: ovirt_engine
  collections:
  - ovirt.ovirt
  vars_files:
  - vault.yml
  tasks:
  - name: Install oVirt Engine
    tags:
    - ovirt
    - ovirt_engine
    - ovirt_engine_install
    import_role:
      name: engine_setup
    vars:
      ovirt_engine_setup_version: "4.4"
      ovirt_engine_setup_organization: "GatwardIT"
      ovirt_engine_setup_fqdn: "{{ ansible_fqdn }}"
      ovirt_engine_setup_firewall_manager: firewalld
      ovirt_engine_setup_admin_password: "{{ vault_ovirt_admin_pass }}"
      ovirt_engine_grafana_enable: false
    when: (ovirt_bootstrap_engine is defined and ovirt_bootstrap_engine|bool) or packages.changed

  - name: set up TLS for engine services
    tags:
    - ovirt
    - ovirt_engine
    - ovirt_ssl
    import_role:
      name: ansible-role-ovirt-ssl
    vars:
      httpd_key_file: /etc/pki/tls/private/{{ ansible_fqdn }}.key
      httpd_cert_file: /etc/pki/tls/certs/{{ ansible_fqdn }}.pem
      httpd_ca_cert: "{{ lookup('file', '/etc/ipa/ca.crt') }}"

  - name: set up LDAP auth
    tags:
    - ovirt
    - ovirt_engine
    - ovirt_ldap
    import_role:
      name: ansible-role-ovirt-ldap
    vars:
      ovirt_engine_ldap_setup:
        aaaProfileName: "{{ ovirt_ldap_profile_name }}"
        profile: ipa
        useDNS: True
        serverset: round-robin
        protocol: starttls
        hosts: ipa01.ipa.home.gatwards.org ipa02.ipa.home.gatwards.org
        user: uid=svc-ovirt,cn=users,cn=accounts,dc=ipa,dc=home,dc=gatwards,dc=org
        baseDN: dc=ipa,dc=home,dc=gatwards,dc=org
        password: "{{ vault_ovirt_ldap_password }}"
        toolEnable: False
        configOverwrite: True
        useVmSso: False
        cacert_method: insecure
        autoAcceptDefault: True

  - name: Check if Engine health page is up
    tags:
    - always
    uri:
      url: "http://{{ ansible_fqdn }}/ovirt-engine/services/health"
      status_code: 200
    register: health_page
    retries: 30
    delay: 10
    until: health_page is success



- name: Configure oVirt Engine
  remote_user: svc-ansible
  become: true
  hosts: ovirt_engine
  collections:
  - ovirt.ovirt
  vars_files:
  - vault.yml
  tasks:
  - name: Obtain SSO token with using username/password credentials
    ovirt.ovirt.ovirt_auth:
      url: https://{{ ansible_fqdn }}/ovirt-engine/api
      username: admin@internal
      password: "{{ vault_ovirt_admin_pass }}"

  - name: Remove default cluster
    ovirt_cluster:
      auth: "{{ ovirt_auth }}"
      name: Default
      state: absent

  - name: Remove default datacenter
    ovirt_datacenter:
      auth: "{{ ovirt_auth }}"
      name: Default
      state: absent

  - name: Create custom datacenter
    ovirt_datacenter:
      auth: "{{ ovirt_auth }}"
      name: "{{ ovirt_datacenter_name }}"
      state: present
      local: True

  - name: Create custom cluster
    ovirt_cluster:
      auth: "{{ ovirt_auth }}"
      name: "{{ ovirt_cluster_name }}"
      data_center: "{{ ovirt_datacenter_name }}"
      state: present
      ballooning: true
      cpu_arch: x86_64
      firewall_type: firewalld
      memory_policy: server
      migration_policy: minimal_downtime
      resilience_policy: migrate
      scheduling_policy: evenly_distributed
      switch_type: legacy

  - name: Configure LDAP admin group
    ovirt_group:
      auth: "{{ ovirt_auth }}"
      name: "{{ ovirt_ldap_admins_group }}"
      domain: "{{ ovirt_ldap_profile_name }}-authz"

  - name: Grant admin group permissions
    ovirt_permission:
      auth: "{{ ovirt_auth }}"
      group_name: "{{ ovirt_ldap_admins_group }}"
      authz_name: "{{ ovirt_ldap_profile_name }}-authz"
      object_type: data_center
      object_name: "{{ ovirt_datacenter_name }}"
      role: SuperUser

  - name: Always revoke the SSO token
    ovirt_auth:
      state: absent
      ovirt_auth: "{{ ovirt_auth }}"
